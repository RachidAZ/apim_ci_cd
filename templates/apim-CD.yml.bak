---
name: "APIM-CD"

trigger:
  - none

resources:
  repositories:
    - repository: templates
      type: git
      name: SNPR-DATA-LAKE/azure-devops-pipelines

parameters:
  - name: project
    type: string
    default: datalake
    values:
      - datalake
  - name: product
    type: string
    default: apim
    values:
      - apim
  - name: artifact_version
    type: string
  - name: environment
    type: string
    default: sbx1
    values:
      - sbx1
      - dev
      - qa01
      - uat
      - prod


variables:
    service_connections: {AZURE_DEVOPS_SERVICE_CONNECTION}
    remote_git_url: "{YOUR_APIM_NAME}.scm.azure-api.net"
    apim_rg: {YOUR_RESOURCE_GROUP}
    apim_name: "{YOUR_APIM_NAME}"
  
stages:
  - stage: planning
    dependsOn: []
    displayName: "${{ parameters.product }} planning changes"
    condition: ne(variables['Build.Reason'], 'PullRequest')
    pool: "${{ parameters.project }}-${{ parameters.environment }}"
    jobs:
      - job: plan
        workspace:
          clean: all
        displayName: "planning changes"
        steps:
       
          - template: step-artifact-download.yml@templates
            parameters:
              packagename: ${{ parameters.product }}
              version: "${{ parameters.artifact_version }}"
          
          
              # generate apim git passowrd
          - template: azure-pipelines/step-apim-generate-git-pass.yml
            parameters:
                apim_name: ${{variables.apim_name}}
                apim_rg: ${{variables.apim_rg}}
              
              # clone target apim git
          - template: azure-pipelines/step-clone-apim-git.yml
            parameters:
                remote_git_url: ${{variables.remote_git_url}}
                remote_git_user : "apim"
                remote_git_pass : $(git_pass.git_token)

              # show diff and upload it as pipeline artifact
          - template: azure-pipelines/step-copy-artifact-apim-and-upload.yml
            parameters:
                workdir: "$(System.DefaultWorkingDirectory)/api-management"
                remote_git_url: ${{variables.remote_git_url}}
                env : ${{ parameters.environment }}

             # store planned apim config artifact as pipeline artifact
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: apim_clone/apim-datalake-${{ parameters.environment }}-westeurope-01.scm.azure-api.net/api-management
              artifactName: apim_planned
            condition: true #in(variables['check_plan.anyChanges'], 'true')
            displayName: "Upload artifact apim_planned"
          

  
  - stage: applying
    dependsOn: planning
    displayName: "${{ parameters.product }} applying changes"
    condition: true
    pool: "${{ parameters.project }}-${{ parameters.environment }}"
    variables:
      TF_CLI_ARGS: "-no-color"
      git_password: $[ stageDependencies.planning.plan.outputs['git_pass.git_token'] ] 
    jobs:
      - deployment: apply
        workspace:
          clean: all
        displayName: "applying changes"
        environment: "${{ parameters.project }}-${{ parameters.environment }}"
        strategy:
          runOnce:
            deploy:
              steps:

                - checkout: self
                  persistCredentials: true

                   # clone target apim git
                - template: azure-pipelines/step-clone-apim-git.yml
                  parameters:
                      remote_git_url: ${{variables.remote_git_url}}
                      remote_git_user : "apim"
                      remote_git_pass : $(git_password)

                - task: AzureCLI@2
                  displayName: "APIM deploy"
                  inputs:
                    azureSubscription: ${{ variables.service_connections }}
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      # Propagate pipeline Service Principal to be used by az cli
                      export ARM_CLIENT_ID=$servicePrincipalId
                      export ARM_CLIENT_SECRET=$servicePrincipalKey
                      export ARM_TENANT_ID=$tenantId
                      # Propagate from Azure CLI context
                      export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                      

                      set -e
                      #git config --global user.email "sonepar.devops@sonepar.com"
                      #git config --global user.name "Sonepar DevOps"
                      git config --global user.email "apim@sonepar.com"
                      git config --global user.name "apim"



                      echo "-->List artifact content:"
                      ls $(Pipeline.Workspace)/apim_planned

                      echo "-->List apim content:"
                      ls $BUILD_SOURCESDIRECTORY/apim_clone/${{variables.remote_git_url}}/api-management

                      cd apim_clone/${{variables.remote_git_url}}

                      echo "-->Show the latest commit from the log of the target apim:"
                      git fetch
                      git config pager.log false
                      git log -1

                        # empty out apim git content
                      rm -r $BUILD_SOURCESDIRECTORY/apim_clone/${{variables.remote_git_url}}/api-management/*

                     
                        # copy artifact:
                      cp -R  $(Pipeline.Workspace)/apim_planned/. $BUILD_SOURCESDIRECTORY/apim_clone/${{variables.remote_git_url}}/api-management/


                        # show differences (for debugging)
                      echo "-->Show GIT DIFF:"
                      git config pager.diff false
                      git diff --ignore-all-space


                        # commit the changes to the apim master branch 
                      echo "-->Commit the changes:"
                      git add .
                      git commit --allow-empty -m "Deployed from pipeline_id $BUILD_BUILDID "
                      echo "-->Push changes:"
                      git push origin master -f 
                      git status



                        # call Azure DevOps REST API to deploy the artifact 
                      echo "-->Call Azure DevOps REST API to deploy the artifact "
                      apim_name=$(echo ${{variables.apim_name}})
                      rg=$(echo ${{variables.apim_rg}})
                      url="https://management.azure.com/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$rg/providers/Microsoft.ApiManagement/service/$apim_name/tenant/configuration/deploy?api-version=2020-12-01"
                      echo "Calling the REST API : $url "
                      id_request=$(az rest --method post --uri $url --body "{   \"properties\": {     \"branch\": \"master\"   } }" --header "Accept=application/json" | jq '.id' | tr -d '"')
                    
                      status=""
                      echo "Calling the REST API : https://management.azure.com/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$rg/providers/Microsoft.ApiManagement/service/$apim_name/tenant/operationResults/$id_request?api-version=2021-08-01 "
                      while : ; do
                        api_response=$(az rest --method get --uri https://management.azure.com/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$rg/providers/Microsoft.ApiManagement/service/$apim_name/tenant/operationResults/$id_request\?api-version\=2021-08-01  || status="Failed"  )
                        #echo $api_response
                        #echo "Status: $status"
                        if [ "$status" = "Failed" ]; then echo "Failed" ; break  ; fi
                        #echo $api_response | jq '.properties.status'
                        status=` echo $api_response | jq '.properties.status' `
                        echo "Status: $status"
                        if [[ $status != "Failed" ]]; then status=`echo $status | tr -d '"' `   ; fi
                        if [[ $status != "InProgress" ]]; then break ; fi
                        sleep 2
                        
                      done
                      if [[ $status != "Succeeded" ]]; then exit 1 ; fi

                      if [[ $status == "Succeeded" ]]
                      then 
                        cd $BUILD_SOURCESDIRECTORY  
                        echo "------" ; 


                          # keep head attached
                        git fetch --all
                        git switch $(basename $(Build.SourceBranch)) 

                          # write deployed version to env/{env}.txt and sync git
                        echo ${{ parameters.artifact_version }} >  env/${{ parameters.environment }}.txt  
                        git add env/${{ parameters.environment }}.txt  
                        git commit  -m "[CI-CD] Deployed version ${{ parameters.artifact_version }} on ${{ parameters.environment }}"  
                        #echo "-----" 
                        git pull 
                        git push   
                        #echo "-----"   
                        #git status  
                      fi



                    addSpnToEnvironment: true
                    useGlobalConfig: true



